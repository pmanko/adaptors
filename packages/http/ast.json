{
  "operations": [
    {
      "name": "request",
      "params": [
        "method",
        "path",
        "options"
      ],
      "docs": {
        "description": "Make a HTTP request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "request('GET', '/patient', {\n  query: { foo: 'bar', a: 1 },\n});",
            "caption": "Make a GET request"
          },
          {
            "title": "example",
            "description": "request('POST', '/todos', {\n  body:{\n    \"userId\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  },\n});",
            "caption": "Make a POST request with a body"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The HTTP method to use.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "method"
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Body, Query, Headers and Authentication parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "get",
      "params": [
        "path",
        "options"
      ],
      "docs": {
        "description": "Make a GET request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "get('/patient', {\n  query: { foo: 'bar', a: 1 },\n});",
            "caption": "GET request with query parameters and custom headers"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Body, Query, Headers and Authentication parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "post",
      "params": [
        "path",
        "data",
        "options"
      ],
      "docs": {
        "description": "Make a POST request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "post('/patient', $.data);",
            "caption": "POST a resource with from state"
          },
          {
            "title": "example",
            "description": "post('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n});",
            "caption": "POST a resource with custom headers"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Body data to append to the request. JSON will be converted to a string.",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Query, Headers and Authentication parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "put",
      "params": [
        "path",
        "data",
        "options"
      ],
      "docs": {
        "description": "Make a PUT request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "put('/patient', $.data);",
            "caption": "PUT a resource from state"
          },
          {
            "title": "example",
            "description": "put('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n})",
            "caption": "PUT a resource with custom headers"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Body data to append to the request. JSON will be converted to a string.",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Query, Headers and Auth parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options-null"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "patch",
      "params": [
        "path",
        "data",
        "options"
      ],
      "docs": {
        "description": "Make a PATCH request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "patch('/patient', $.data);",
            "caption": "PATCH a resource from state"
          },
          {
            "title": "example",
            "description": "patch('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n});",
            "caption": "PATCH a resource with custom headers"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Body data to append to the request. JSON will be converted to a string.",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Query, Headers and Auth parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "del",
      "params": [
        "path",
        "options"
      ],
      "docs": {
        "description": "Make a DELETE request. If `configuration.baseUrl` is set, paths must be relative.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "del(`/myendpoint/${$.data.id}`);",
            "caption": "DELETE a resource by ID"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Query, Headers and Auth parameters",
            "type": {
              "type": "NameExpression",
              "name": "RequestOptions"
            },
            "name": "options"
          },
          {
            "title": "state",
            "description": "{HttpState}"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "parseXML",
      "params": [
        "data",
        "script"
      ],
      "docs": {
        "description": "Parse XML with the Cheerio parser",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "parseXML(\n  (state) => state.response,\n  ($) => {\n    return $(\"table[class=your_table]\").parsetable(true, true, true);\n  }\n);",
            "caption": "Parse XML from state.response"
          },
          {
            "title": "example",
            "description": "parseXML(\n  (state) => state.response,\n  ($) => $(\"table[class=your_table]\").parsetable(true, true, true)\n).then((next) => ({ ...next, results: next.data.data }));",
            "caption": "Using parseXML with a callback to extract data"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Body string to be parsed",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "script for extracting data",
            "type": {
              "type": "NameExpression",
              "name": "function"
            },
            "name": "script"
          },
          {
            "title": "state",
            "description": "data - the parsed XML as a JSON object"
          },
          {
            "title": "state",
            "description": "references - an array of all previous data objects used in the Job"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    }
  ],
  "exports": [],
  "common": []
}