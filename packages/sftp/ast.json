{
  "operations": [
    {
      "name": "execute",
      "params": [
        "operations"
      ],
      "docs": {
        "description": "Execute a sequence of operations with automatic connection management.\nWraps `language-common/execute`, and prepends initial state for sftp.",
        "tags": [
          {
            "title": "example",
            "description": "execute(\n  list('/some/path/'),\n  getCSV('/data.csv')\n)(state)"
          },
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "param",
            "description": "Operations to be performed.",
            "type": {
              "type": "NameExpression",
              "name": "Operations"
            },
            "name": "operations"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "executeManual",
      "params": [
        "operations"
      ],
      "docs": {
        "description": "Execute a sequence of operations with manual connection management.\nUse this when you want to control SFTP connection/disconnection manually within your job.",
        "tags": [
          {
            "title": "example",
            "description": "executeManual(\n  connect,\n  list('/some/path/'),\n  getCSV('/data.csv'),\n  disconnect\n)(state)"
          },
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "param",
            "description": "Operations to be performed.",
            "type": {
              "type": "NameExpression",
              "name": "Operations"
            },
            "name": "operations"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "connect",
      "params": [
        "state"
      ],
      "docs": {
        "description": "Connect to SFTP server",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "executeManual(\n  connect,\n  list('/some/path/'),\n  disconnect\n)(state)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "disconnect",
      "params": [
        "state"
      ],
      "docs": {
        "description": "Disconnect from SFTP server",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "executeManual(\n  connect,\n  list('/some/path/'),\n  disconnect\n)(state)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "list",
      "params": [
        "dirPath",
        "filter",
        "callback"
      ],
      "docs": {
        "description": "List files present in a directory",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "list('/some/path/')",
            "caption": "basic files listing"
          },
          {
            "title": "example",
            "description": "list('/some/path/', file=> {\n return /foo.\\.txt/.test(file.name);\n})",
            "caption": "list files with filters"
          },
          {
            "title": "example",
            "description": "list(\n  \"/some/path/\",\n  (file) => /foo.\\.txt/.test(file.name),\n  (state) => {\n    const latestFile = state.data.filter(\n      (file) => file.modifyTime <= new Date()\n    );\n    return { ...state, latestFile };\n  }\n);",
            "caption": "list files with filters and use callback"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to remote directory",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "dirPath"
          },
          {
            "title": "param",
            "description": "a filter function used to select return entries",
            "type": {
              "type": "NameExpression",
              "name": "function"
            },
            "name": "filter"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "get",
      "params": [
        "filePath",
        "localPath"
      ],
      "docs": {
        "description": "Get a file from SFTP server",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "get('/path/to/file.txt')"
          },
          {
            "title": "example",
            "description": "get('/path/to/file.xlsx', '/local/path/file.xlsx')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to remote file",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "filePath"
          },
          {
            "title": "param",
            "description": "Optional local path to save file (if not provided, returns file content)",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            "name": "localPath"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getCSV",
      "params": [
        "filePath",
        "parsingOptions"
      ],
      "docs": {
        "description": "Get a CSV and return a JSON array of strings for each item separated by the delimiter",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "getCSV(\n  '/some/path/to_file.csv',\n  {delimiter: \";\", flatKeys: true }\n);"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "filePath"
          },
          {
            "title": "param",
            "description": "Optional. `parsingOptions` Parsing options which can be passed to convert csv to json See more {@link https://github.com/Keyang/node-csvtojson#parameters on csvtojson docs}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "readStreamOptions",
                    "value": {
                      "type": "NameExpression",
                      "name": "object"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "delimiter",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "noheader",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "quote",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "trim",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "flatKeys",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "output",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "parsingOptions"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "putCSV",
      "params": [
        "localFilePath",
        "remoteFilePath",
        "parsingOptions"
      ],
      "docs": {
        "description": "Convert JSON to CSV and upload to an FTP server",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "putCSV(\n  '/some/path/to_local_file.csv',\n  '/some/path/to_remove_file.csv',\n  { delimiter: ';', noheader: true }\n);"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": " Data source for data to copy to the remote server.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "localFilePath"
          },
          {
            "title": "param",
            "description": "Path to the remote file to be created on the server.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "remoteFilePath"
          },
          {
            "title": "param",
            "description": "Options which can be passed to adjust the read and write stream used in sending the data to the remote server",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "parsingOptions"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getJSON",
      "params": [
        "filePath",
        "encoding"
      ],
      "docs": {
        "description": "Fetch a json file from an FTP server",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "getJSON(\n  '/path/To/File',\n  'utf8',\n);"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to resource",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "filePath"
          },
          {
            "title": "param",
            "description": "Character encoding for the json",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "encoding"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getXLSX",
      "params": [
        "filePath",
        "parsingOptions"
      ],
      "docs": {
        "description": "Fetch an Excel (XLSX) file from an SFTP server and parse it in memory-efficient chunks",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "getXLSX(\n  '/path/to/file.xlsx',\n  { sheetName: 'Sheet1', withHeader: true, chunkSize: 1000, maxRows: 100 }\n);"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to the Excel file on the SFTP server",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "filePath"
          },
          {
            "title": "param",
            "description": "Options for parsing the Excel file",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "parsingOptions"
          },
          {
            "title": "param",
            "description": "Name of the sheet to read (default: first sheet)",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "parsingOptions.sheetName"
          },
          {
            "title": "param",
            "description": "Use first row as headers (default: true)",
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            },
            "name": "parsingOptions.withHeader"
          },
          {
            "title": "param",
            "description": "Ignore empty rows (default: true)",
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            },
            "name": "parsingOptions.ignoreEmpty"
          },
          {
            "title": "param",
            "description": "Number of rows to process at once (default: 1000)",
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "name": "parsingOptions.chunkSize"
          },
          {
            "title": "param",
            "description": "Maximum number of rows to read (default: undefined)",
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "name": "parsingOptions.maxRows"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "normalizeCSVarray",
      "params": [
        "options",
        "callback"
      ],
      "docs": {
        "description": "Convert JSON array of strings into a normalized object",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "normalizeCSVarray({ delimiter: ';', noheader: true });"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Options passed to csvtojson parser",
            "type": {
              "type": "NameExpression",
              "name": "options"
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Options passed to csvtojson parser",
            "type": {
              "type": "NameExpression",
              "name": "callback"
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    }
  ],
  "exports": [],
  "common": []
}